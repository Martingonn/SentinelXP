import hashlib
import os
from datetime import datetime

# Function to calculate SHA256 hash of a file
def calculate_sha256(file_path):
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except FileNotFoundError:
        print(f"Error: {file_path} not found.")
        return None

# Function to process all files in a folder and write hashes to a .txt file
def hash_files_in_folder(folder_path, output_file):
    try:
        with open(output_file, "w") as f:
            # Write header with timestamp
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            f.write(f"Hash Report - Generated on {timestamp}\n")
            f.write("Filename\tSHA256 Hash\n")
            f.write("=" * 50 + "\n")

            # Process each file in the folder
            for root, _, files in os.walk(folder_path):
                for file_name in files:
                    file_path = os.path.join(root, file_name)
                    file_hash = calculate_sha256(file_path)
                    if file_hash:
                        f.write(f"{file_hash}\t{file_name}\n")
                        print(f"Processed: {file_name} -> {file_hash}")
    except Exception as e:
        print(f"Error while writing hashes: {e}")

if __name__ == "__main__":
    # Specify the folder to scan and output file
    FOLDER_TO_SCAN = str(input("Input file folder with training samples: "))
    OUTPUT_FILE = str(input("Input path to output .txt file: "))

    # Generate hash report
    hash_files_in_folder(FOLDER_TO_SCAN, OUTPUT_FILE)
    print(f"Hash report saved to {OUTPUT_FILE}")
