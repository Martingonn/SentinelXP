#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import hashlib
import ssdeep

def calculate_md5(file_path):
    """Calculate MD5 hash of a file."""
    md5 = hashlib.md5()
    with open(file_path, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b''):
            md5.update(chunk)
    return md5.hexdigest()

def calculate_ssdeep(file_path):
    """Calculate SSDeep fuzzy hash of a file."""
    try:
        return ssdeep.hash_from_file(file_path)
    except Exception as e:
        print(f"Error calculating SSDeep for {file_path}: {e}")
        return None

def main():
    folder = input("Enter the folder path to scan: ").strip()
    if not os.path.isdir(folder):
        print("Invalid folder path.")
        return

    output_file = input("Enter the output file path (e.g., output.txt): ").strip()
    try:
        out_f = open(output_file, 'w', encoding='utf-8')
    except Exception as e:
        print(f"Cannot open output file: {e}")
        return

    print(f"Scanning files in: {folder}")
    files = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]

    for filename in files:
        full_path = os.path.join(folder, filename)
        try:
            md5_hash = calculate_md5(full_path)
            ssdeep_hash = calculate_ssdeep(full_path)
            if ssdeep_hash is None:
                ssdeep_hash = "ERROR"
            out_f.write(f"{md5_hash} {ssdeep_hash} {filename}\n")
            print(f"Processed: {filename}")
        except Exception as e:
            print(f"Failed to process {filename}: {e}")

    out_f.close()
    print(f"\nHashes saved to: {output_file}")

if __name__ == "__main__":
    main()
